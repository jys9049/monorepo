options:
  logging: CLOUD_LOGGING_ONLY
  substitution_option: ALLOW_LOOSE

steps:
  # 1) detect which subfolders under `apps/` changed vs origin/main and write to workspace
  - name: "gcr.io/cloud-builders/git"
    entrypoint: /bin/bash
    args:
      - -c
      - |
        set -euo pipefail
        # fetch remote main so we can compare against it
        git fetch --depth=50 origin main || true

        # Try to detect changed files against origin/main first. This works for PRs
        # and branch builds. If that produces no output (for example when a build
        # runs on main and origin/main already points to the new commit), fall
        # back to comparing the last commit (HEAD^...HEAD).
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD || true)

        if [ -z "$$CHANGED_FILES" ]; then
          # If there's a parent commit, compare last commit vs its parent.
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            CHANGED_FILES=$(git diff --name-only HEAD^...HEAD || true)
          else
            # No parent (initial commit) — treat all tracked files as changed
            CHANGED_FILES=$(git ls-files || true)
          fi
        fi

        # From the changed files list, extract top-level app folders under apps/
        echo "$$CHANGED_FILES" | grep '^apps/' | cut -d/ -f2 | sort -u > /workspace/changed_apps.txt || true
        echo "Changed apps: $(cat /workspace/changed_apps.txt | tr '\n' ' ')"

  # 2) For each changed app build & deploy. Uses Dockerfile if present, otherwise uses Buildpacks.
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: /bin/bash
    args:
      - -c
      - |
        set -euo pipefail
        CHANGED_APPS=$(cat /workspace/changed_apps.txt | tr '\n' ' ')
        if [ -z "$$CHANGED_APPS" ]; then
          echo "No changed apps detected. Nothing to build/deploy."
          exit 0
        fi

        for app in $$CHANGED_APPS; do
          # skip empty lines
          [ -z "$$app" ] && continue
          echo "--- Processing app: $$app ---"

          APP_DIR="apps/$$app"
          IMAGE="gcr.io/$PROJECT_ID/$$app"

          if [ -f "$$APP_DIR/Dockerfile" ]; then
            echo "Found Dockerfile for $$app — building image via gcloud builds submit"
            gcloud builds submit "$$APP_DIR" --tag "$$IMAGE"
          else
            echo "No Dockerfile for $$app — trying buildpacks (gcloud builds submit --pack)"
            gcloud builds submit --pack "$$APP_DIR" --tag "$$IMAGE"
          fi

          echo "Deploying $$app to Cloud Run (region=${_REGION})"
          gcloud run deploy "$$app" --image "$$IMAGE" --region "${_REGION}" --platform managed --quiet
        done

substitutions:
  _REGION: "asia-northeast3"

timeout: "1800s"
